/*
 * Copyright Â© 2024 Paul Tavitian.
 */

package cloud.tavitian.dedrmtools.kfxdedrm;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.nio.charset.StandardCharsets;
import java.security.NoSuchAlgorithmException;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;

@DisplayName("IonUtils Tests")
final class IonUtilsTests {
    private static final byte[] bytes = "PIDv3AESAES/CBC/PKCS5PaddingHmacSHA256ACCOUNT_SECRET7ea2d36b5acc3d245c26417c3ee6c9ac3495698fCLIENT_IDSW527rnb7MPznA5dP8SYrCPt7GnMSGS7Pv5Cnhnn".getBytes(StandardCharsets.US_ASCII);
    private static final int version = 3;

    @Test
    @DisplayName("Obfuscate Test")
    void obfuscate() throws NoSuchAlgorithmException {
        byte[] returnValue = {97, 18, -69, -69, 8, -18, 63, 11, -2, -90, -23, 79, 17, -48, -115, -97, 117, 100, -49, -66, 11, -107, 16, 1, -63, -91, -100, 78, 67, -6, -22, -94, 2, 48, -51, -20, 15, -97, 39, 11, -10, -111, -112, 31, 69, -13, -44, -94, 116, 53, -37, -17, 89, -104, 28, 123, -28, -100, -111, 28, 22, -30, -113, -95, 112, 63, -38, -71, 95, -119, 57, 58, -14, -110, -128, 30, 25, -1, -22, -60, 98, 25, -35, -23, 93, -110, 101, 15, -104, -104, -102, 25, 67, -27, -23, -97, 114, 48, -51, -24, 15, -127, 4, 36, -11, -106, -115, 73, 20, -125, -56, -97, 114, 2, -53, -17, 5, -28, 30, 34, -104, -67, -117, 30, 21, -127, -22, -15, 97, 16, -71, -24, 10, -92, 41, 76, -4, -57, -70, 75, 25, -40, -115, -15};

        assertArrayEquals(returnValue, IonUtils.obfuscate(bytes, version));
    }

    @Test
    @DisplayName("Obfuscate2 Test")
    void obfuscate2() throws NoSuchAlgorithmException {
        byte[] returnValue = {56, 23, -74, 76, -16, 10, 14, -110, -112, 86, 68, -33, 115, -52, 34, 72, 75, 59, -97, 60, -11, 5, 6, -112, -112, 56, 35, -88, 89, -14, 79, 101, 94, 63, -28, 29, -3, 79, 8, -108, -10, 87, 32, -120, 37, -20, 117, 81, 96, 53, -28, 11, -61, 126, 77, -1, -112, 25, 32, -37, 67, -22, 72, 102, 14, 114, -45, 17, -3, 85, 81, -27, -10, 42, 49, -33, 102, -23, 82, 123, 33, 49, -111, 60, -68, 110, 122, -25, -63, 14, 32, -39, 67, -18, 80, 123, 109, 19, -66, 55, -12, 83, 86, -62, -26, 46, 70, -39, 34, -20, 83, 120, 75, 33, -116, 43, -35, 104, 112, -27, -105, 14, 21, -37, 68, -24, 73, 104, 109, 17, -78, 74, -15, 11, 12, -62, -109, 93, 19, -39, 36, -97, 127, 24};

        assertArrayEquals(returnValue, IonUtils.obfuscate2(bytes, version));
    }

    @Test
    @DisplayName("Obfuscate3 Test")
    void obfuscate3() throws NoSuchAlgorithmException {
        byte[] returnValue = {49, 81, -69, -76, 74, -42, 51, 28, -16, -90, -113, 69, 23, -127, -44, -103, 98, 37, -34, -105, 9, -109, 10, 123, -45, -91, -104, 19, 99, -27, -7, -60, 83, 2, -57, -17, 10, -17, 17, 8, -39, -76, -83, 48, 121, -40, -56, -72, 114, 101, -21, -20, 95, -28, 56, 127, -47, -86, -24, 7, 18, -30, -126, -110, 2, 50, -19, -24, 121, -73, 60, 121, -44, -108, -26, 51, 22, -113, -115, -59, 4, 52, -35, -103, 95, -105, 2, 123, -43, -57, -18, 30, 20, -46, -116, -91, 101, 103, -17, -66, 19, -73, 48, 121, -7, -80, -20, 78, 68, -28, -17, -61, 121, 1, -51, -119, 121, -108, 104, 43, -10, -70, -100, 62, 104, -40, -23, -78, 112, 98, -95, -103, 85, -123, 57, 7, -28, -125, -101, 56, 112, -9, -13, -95};

        assertArrayEquals(returnValue, IonUtils.obfuscate3(bytes, version));
    }

    @Test
    @DisplayName("Process V9708 Test")
    void processV9708() {
        byte[] returnValue = {-23, -60, 87, -89, -38, -26, -86, 36, 54, 94, 126, -14, 25, -71, 52, -79, 126, -43, -114, -25, -43, 50, -109, 67, -4, 58, -22, 120, 96, -19, 81, -7, -89, 61, -31, 67, 81, -55, 95, -75, 13, 87, -48, 61, 72, -79, -91, 123, 40, -113, 95, 66, 52, -83, 39, -83, -40, -104, -122, 43, 61, 14, -57, -85, 105, -105, 53, -62, -100, -105, 92, -73, -45, -72, 74, -38, 106, -53, -19, -122, 61, -5, -20, 19, 64, -122, -91, -51, 75, -58, 1, 1, -67, -37, 93, -94, 18, -78, -49, 44, -28, 112, -70, 41, -90, -115, 22, 92, 38, 92, 50, 8, -66, -3, -77, -93, 22, -78, -76, -38, 54, 13, -69, -93, 75, -104, -88, 76, 30, 18, -84, 32, -66, -87, -65, -94, -11, 29, 105, 123, -93};

        assertArrayEquals(returnValue, IonUtils.processV9708(bytes));
    }

    @Test
    @DisplayName("Process V1031 Test")
    void processV1031() {
        byte[] returnValue = {-43, 62, -2, -89, -3, -48, -3, -93, -31, -32, -21, -70, -24, 124, -83, 14, -113, 94, -12, 19, -60, 113, -61, -82, -127, -13, -110, 34, -87, -20, -117, -114, -43, -126, -32, 69, -111, -116, -107, -68, 36, -76, 92, 3, 114, -18, -127, 22, -88, -67, 60, -49, -56, -62, -90, -115, -66, 59, 54, -5, -32, -96, 22, -113, 89, 27, 21, -40, 81, -75, 107, 25, -107, -34, -124, 52, 67, -35, -76, -69, -115, 102, -12, 99, -116, 100, 88, 68, 36, -106, 120, 121, -113, -78, -33, -28, 51, 37, 103, 92, 99, 123, -80, -72, -126, 9, -113, 10, -49, 91, 72, 56, 47, 97, -8, 104, 62, -49, 13, -108, 100, 76, -43, -86, -26, 55, -58, 10, -93, 49, -109, -86, 17, 3, 41, 48, -62, 13, 29, -34, 7};

        assertArrayEquals(returnValue, IonUtils.processV1031(bytes));
    }

    @Test
    @DisplayName("Process V2069 Test")
    void processV2069() {
        byte[] returnValue = {-114, 97, -106, -41, 84, -93, 4, -55, 53, 78, -111, -75, -41, -97, 7, -80, 72, 2, 109, 49, -57, 55, 58, -122, -111, -27, 19, -14, -56, 2, -57, 6, 116, 39, 49, -54, -88, 88, -6, -1, 74, -74, -87, -37, -84, 101, -50, 35, 48, 93, 44, -8, 76, 85, 97, 15, -32, 125, -109, 91, 48, 42, -91, 62, -102, 6, 116, -17, 55, 101, 63, 50, 84, 85, -108, -54, -13, -115, -82, -71, 121, -56, 23, -47, 103, 26, -47, -23, -124, 25, 71, 99, 32, 92, -97, 114, 67, 85, 32, -127, 55, 63, -51, 33, -54, -52, 72, -28, -75, 87, 20, 29, -5, 123, 38, -30, 84, -85, 73, 5, 7, -14, -67, 52, 122, 107, 96, 110, -122, 70, 76, 101, 55, 90, 38, 69, -44, -126, 38, -116, 12};

        assertArrayEquals(returnValue, IonUtils.processV2069(bytes));
    }

    @Test
    @DisplayName("Process V9041 Test")
    void processV9041() {
        byte[] returnValue = {17, -9, -37, 7, 75, 36, -27, 96, -33, -90, -6, -29, 37, 43, 56, 60, 59, -109, 110, 81, -10, -34, -43, 112, -36, -109, 108, -79, -38, -97, 79, -60, -87, 126, -58, -122, -25, -40, 37, -48, 12, 75, 27, -69, -33, 58, -110, 41, 46, -54, -82, 115, 6, -60, 19, 83, 3, 11, -54, -85, 7, 17, 29, -38, 60, -109, -17, -21, 26, -107, -90, 26, 62, 25, 107, 56, 7, -44, 76, -111, 62, 52, 86, 19, -110, -94, 39, -96, 96, -56, -40, -34, -93, -81, 77, -5, 40, 8, 108, 40, -77, 127, -105, 60, -20, 83, -107, -52, -64, -86, -85, 87, -110, -25, 125, 74, -29, -25, -79, 5, 77, 87, -29, 56, 91, -20, 60, -89, 82, 88, 103, -63, -52, -53, 55, 45, 112, 113, -93, 126, -83};

        assertArrayEquals(returnValue, IonUtils.processV9041(bytes));
    }

    @Test
    @DisplayName("Process V3646 Test")
    void processV3646() {
        byte[] returnValue = {-44, 104, -86, 54, 43, 68, 71, -110, -126, 41, 25, -125, 36, 59, 56, 25, 124, 75, 74, -94, 76, 44, 88, -26, 44, 118, -20, 75, -127, -32, -123, 86, -54, 12, 84, 48, 22, 100, 88, 34, 31, -50, -89, -85, -20, -6, 84, 36, -69, -66, -5, 9, -56, -28, -37, -38, -101, 28, -35, -74, -35, 84, -98, -50, -93, 31, -17, -37, 120, 39, 5, -35, -2, 31, 29, -20, 6, -48, -62, 103, 1, -40, -63, 54, 25, -16, -96, -1, 3, -77, 63, -34, 105, 40, 39, 37, 6, 65, 15, -113, -80, 70, -41, -10, 49, 93, 112, 124, 22, 48, -10, -67, 14, -67, -55, -93, -26, -71, 119, -16, -125, -81, 66, 68, 85, -21, 42, -104, -72, -98, 90, -4, 17, -86, 87, -85, 15, -99, 68, 81, 3};

        assertArrayEquals(returnValue, IonUtils.processV3646(bytes));
    }

    @Test
    @DisplayName("Process V6052 Test")
    void processV6052() {
        byte[] returnValue = {-42, -125, -56, -60, -28, -12, 106, -28, 88, 18, 25, 111, 55, -30, 24, -22, -68, -32, -6, -32, -119, -108, -14, 95, -85, -80, 29, 62, 86, -101, -117, -13, -122, 107, -103, -45, 111, 87, 46, 9, 17, 107, 52, -33, 16, 115, 42, 84, -4, -26, -44, -104, 99, -66, 36, 123, 64, -122, 18, -98, -88, -11, -113, 43, -105, 33, -112, -2, 56, -49, -25, -54, -27, 20, 5, 52, 99, -93, -51, -94, 38, -84, -49, 22, -27, 64, 14, 76, -11, 76, 119, 10, -124, 64, 64, 105, -14, 48, 118, 93, -21, 33, 39, -57, 44, -118, -27, -39, 81, -79, -61, -67, -44, -73, -25, 75, 111, -42, 34, 44, -64, -3, 4, -61, -100, 78, 58, 58, -121, 33, 3, -9, 90, 69, 124, -123, -77, 6, 83, 45, 70};

        assertArrayEquals(returnValue, IonUtils.processV6052(bytes));
    }

    @Test
    @DisplayName("Process V9479 Test")
    void processV9479() {
        byte[] returnValue = {-110, 86, 53, -37, 67, 75, -52, -45, -12, 121, 30, -72, 123, -119, -46, -33, -57, -55, 59, -32, 110, 121, 71, 68, -21, -99, -27, -114, 109, 114, 30, 105, 105, -128, 104, 10, -75, 81, -89, 79, -106, 27, 95, 101, 103, 17, -122, 30, 5, -7, 40, 6, -94, -63, 81, -90, 48, -15, -19, 120, 13, -86, -14, -109, 52, -104, -24, 82, -73, -109, -86, 51, 126, -100, -60, 100, 46, 68, -7, -66, -63, 47, 15, -37, 47, 76, -8, -14, -67, 4, 104, -39, 122, -125, 45, 70, 54, -55, -47, 96, -67, 30, -64, 92, 109, -30, 69, 60, -121, 26, 126, -47, 47, -72, -62, 39, -22, 36, -83, 20, -110, -53, 65, -40, -116, 7, -81, 5, 9, 74, -23, -8, -99, -81, -33, 61, -10, 82, 37, -7, -127};

        assertArrayEquals(returnValue, IonUtils.processV9479(bytes));
    }

    @Test
    @DisplayName("Process V9888 Test")
    void processV9888() {
        byte[] returnValue = {84, -60, 112, 114, 63, -116, 16, 91, -96, 24, 107, 99, 25, 5, 8, 105, -34, 103, 60, -29, 26, 94, -63, 93, 68, 57, -110, 29, 76, -48, 92, 94, -122, 12, -78, -92, 31, -22, 54, -18, 83, 10, 73, 81, 104, 25, -1, 76, -115, 3, 50, 74, -31, -64, -56, 111, 74, 67, -99, -64, 104, 48, -48, -61, -15, -105, -93, -81, -4, -89, -65, -114, 35, -124, 106, 64, -73, 54, 90, 117, -51, -6, 29, 83, 91, 84, 50, -107, -11, -120, 125, -14, -57, 31, 118, -67, 48, -78, 7, -82, 99, 78, 114, -18, 0, -26, -57, 19, -50, 40, -41, -73, 33, -9, -90, -127, -26, -4, -79, 11, 86, -99, 117, -93, 66, 94, 114, -99, 99, -56, -126, -16, 101, -60, -24, -40, -76, -34, -12, -33, -120};

        assertArrayEquals(returnValue, IonUtils.processV9888(bytes));
    }

    @Test
    @DisplayName("Process V4648 Test")
    void processV4648() {
        byte[] returnValue = {112, 91, -44, -51, -117, 97, -44, 89, 110, -12, -54, 64, 119, 77, 104, -25, 31, 31, -124, 108, 110, -108, -67, 35, -3, 38, -27, -63, 39, -32, -66, -86, 101, 10, 80, 23, 31, 27, -80, 120, 107, 79, -111, 42, 32, -50, 54, -49, -94, -66, 53, 81, 112, 87, -63, 4, 30, -12, 6, -110, -46, -46, 122, 75, -62, -12, -124, -66, 37, 127, -12, -49, -77, 112, -112, -98, 30, 100, -3, -128, 35, -38, -3, 99, 69, -2, 59, -69, -124, 38, 125, 119, 122, 114, 16, -117, -14, -108, -60, 36, 104, 43, 118, -81, 113, 8, -101, 7, -41, 43, 31, 35, -9, 77, -121, 43, -72, 61, 30, 59, 51, -127, -71, 98, 94, 92, 10, -29, -46, -3, -20, -29, -91, -119, -86, 46, -70, -103, -7, -81, -66};

        assertArrayEquals(returnValue, IonUtils.processV4648(bytes));
    }

    @Test
    @DisplayName("Process V5683 Test")
    void processV5683() {
        byte[] returnValue = {31, 90, -9, 51, 66, 62, 81, 4, -81, -71, -43, 89, 78, 104, 46, -49, -125, -102, 119, 98, 87, -13, 55, 71, -55, -66, -18, 103, 28, 87, -85, 63, -124, -108, 63, 105, -40, -3, -56, -4, 9, 70, 55, 72, -50, 98, -72, 52, -112, -73, -62, -28, -62, -33, 106, -3, -106, -58, 1, 48, -29, -75, 110, -46, -31, 92, 18, -28, 27, 39, 33, 82, 113, -110, -62, 85, -99, -8, 27, 5, 43, 112, 72, -29, -35, -126, 11, -58, -60, -96, -15, 64, -103, -74, 36, -78, -126, 114, -65, 49, 94, 68, 104, -114, -8, 72, -128, -58, -116, 68, -46, 122, 66, 38, -51, -110, 89, 9, -76, -117, -107, -99, -114, -64, -7, -4, 77, 114, 28, 86, 16, -127, 97, 45, -60, -28, -39, -23, 5, 6, -118};

        assertArrayEquals(returnValue, IonUtils.processV5683(bytes));
    }
}
